name: Build and Deploy

on:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  push:
    branches:
      - master
env:
  DOCKERHUB_REPOSITORY: dfedigital/get-into-teaching-frontend
  CONTAINER: get-into-teaching-app
  DOMAIN: london.cloudapps.digital

jobs:
  turnstyle:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Check workflow concurrency
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 20
          same-branch-only: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_CHANNEL: getintoteaching_tech
           SLACK_COLOR: '#3278BD'
           SLACK_ICON: https://github.com/rtCamp.png?size=48
           SLACK_MESSAGE: 'Content Delivery has failed. This is due to a workflow concurrency issue'
           SLACK_TITLE: 'Failure: ${{ github.workflow }}'
           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  deploy:
    name: Build and deploy
    runs-on: ubuntu-latest
    needs: turnstyle 
    steps:

      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Start Development Deployment
        uses: bobheadxi/deployments@v0.4.2
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env:  'Development'
          ref:  ${{ github.sha }}
        
      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
             dockerfile: "Dockerfile"

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
        
      - name: Get Short SHA
        id: sha
        run: echo ::set-output name=short::$(echo $GITHUB_SHA | cut -c -7)

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
             ${{ runner.os }}-buildx-
             
      - name: Login to Docker Hub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}
          
      - name: Build only
        uses: docker/build-push-action@v2
        if: github.ref != 'refs/heads/master'
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
                 ${{env.DOCKERHUB_REPOSITORY}}:sha-${{ steps.sha.outputs.short }}
          push: false
          build-args: |
                      CONTENT_SHA=${{ steps.sha.outputs.short }}

      - name: Build and push to DockerHub
        uses: docker/build-push-action@v2
        if: github.ref == 'refs/heads/master'
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
                 ${{env.DOCKERHUB_REPOSITORY}}:sha-${{ steps.sha.outputs.short }}
          push: true
          build-args: |
                      CONTENT_SHA=${{ steps.sha.outputs.short }}

      - name: Check Content pages
        if: github.ref == 'refs/heads/master'
        run: |-
          docker run -t --rm -e RAILS_ENV=test \
            ${{env.DOCKERHUB_REPOSITORY}}:sha-${{ steps.sha.outputs.short }} \
            rspec --format documentation spec/features/content_pages_spec.rb

      - uses: hashicorp/setup-terraform@v1.2.1
        with:
           terraform_version: 0.13.4

      - name: Terraform Init
        if: github.ref == 'refs/heads/master'
        run: |
            cd terraform/paas && pwd
            terraform init -backend-config=dev.bk.vars
        env:
              ARM_ACCESS_KEY:           "${{ secrets.DEV_ARM_ACCESS_KEY  }}"
              TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
              TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"

      - name: Terraform Plan
        if: github.ref == 'refs/heads/master'
        run: |
            cd terraform/paas && pwd
            terraform plan -var-file=dev.env.tfvars -out plan
        env:
              TF_VAR_paas_app_docker_image: ${{env.DOCKERHUB_REPOSITORY}}:sha-${{ steps.sha.outputs.short }}
              ARM_ACCESS_KEY:           "${{ secrets.DEV_ARM_ACCESS_KEY  }}"
              TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
              TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"
              TF_VAR_HTTPAUTH_PASSWORD: "${{ secrets.HTTPAUTH_PASSWORD }}"
              TF_VAR_HTTPAUTH_USERNAME: "${{ secrets.HTTPAUTH_USERNAME }}"
              TF_VAR_RAILS_MASTER_KEY:  "${{ secrets.RAILS_MASTER_KEY_ROLLING }}"
              TF_VAR_RAILS_ENV:         "rolling"
              TF_VAR_docker_username:   "${{ secrets.DOCKERHUB_USERNAME }}"
              TF_VAR_docker_password:   "${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}"


      - name: Terraform Apply
        if: github.ref == 'refs/heads/master'
        run: |
            cd terraform/paas && pwd
            terraform apply -auto-approve plan
        env:
              ARM_ACCESS_KEY:           "${{ secrets.DEV_ARM_ACCESS_KEY  }}"
              TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
              TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"

      - name: Smoke tests
        if: github.ref == 'refs/heads/master'
        run: |
             tests/confidence/healthcheck.sh  "get-into-teaching-app-dev" "${{ steps.sha.outputs.short }}"
        env:
             HTTPAUTH_PASSWORD: "${{ secrets.HTTPAUTH_PASSWORD }}"
             HTTPAUTH_USERNAME: "${{ secrets.HTTPAUTH_USERNAME }}"

      - name: Create Sentry release
        if: success()
        uses: getsentry/action-release@v1.1.4
        env:
           SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
           SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
           SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
           environment: development

      - name: Update Development status
        if: always()
        uses: bobheadxi/deployments@v0.4.2
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN}}
          env: 'Development'
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          ref: ${{ github.sha }}

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_CHANNEL: getintoteaching_tech
           SLACK_COLOR: '#3278BD'
           SLACK_ICON: https://github.com/rtCamp.png?size=48
           SLACK_MESSAGE: 'The Development get-into-teaching-content workflow has failed carrying out job ${{github.job}}'
           SLACK_TITLE: 'Development get-into-teaching-content Workflow Failure'
           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
